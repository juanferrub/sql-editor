/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.victormiranda.liferay.sqleditor.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.victormiranda.liferay.sqleditor.model.SnippetEntry;
import com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalService;
import com.victormiranda.liferay.sqleditor.service.persistence.SnippetEntryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the snippet entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.victormiranda.liferay.sqleditor.service.impl.SnippetEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.victormiranda.liferay.sqleditor.service.impl.SnippetEntryLocalServiceImpl
 * @see com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalServiceUtil
 * @generated
 */
public abstract class SnippetEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SnippetEntryLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalServiceUtil} to access the snippet entry local service.
	 */

	/**
	 * Adds the snippet entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param snippetEntry the snippet entry
	 * @return the snippet entry that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SnippetEntry addSnippetEntry(SnippetEntry snippetEntry)
		throws SystemException {
		snippetEntry.setNew(true);

		return snippetEntryPersistence.update(snippetEntry);
	}

	/**
	 * Creates a new snippet entry with the primary key. Does not add the snippet entry to the database.
	 *
	 * @param snippetId the primary key for the new snippet entry
	 * @return the new snippet entry
	 */
	@Override
	public SnippetEntry createSnippetEntry(long snippetId) {
		return snippetEntryPersistence.create(snippetId);
	}

	/**
	 * Deletes the snippet entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param snippetId the primary key of the snippet entry
	 * @return the snippet entry that was removed
	 * @throws PortalException if a snippet entry with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SnippetEntry deleteSnippetEntry(long snippetId)
		throws PortalException, SystemException {
		return snippetEntryPersistence.remove(snippetId);
	}

	/**
	 * Deletes the snippet entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param snippetEntry the snippet entry
	 * @return the snippet entry that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SnippetEntry deleteSnippetEntry(SnippetEntry snippetEntry)
		throws SystemException {
		return snippetEntryPersistence.remove(snippetEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SnippetEntry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return snippetEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.victormiranda.liferay.sqleditor.model.impl.SnippetEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return snippetEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.victormiranda.liferay.sqleditor.model.impl.SnippetEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return snippetEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return snippetEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return snippetEntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SnippetEntry fetchSnippetEntry(long snippetId)
		throws SystemException {
		return snippetEntryPersistence.fetchByPrimaryKey(snippetId);
	}

	/**
	 * Returns the snippet entry with the matching UUID and company.
	 *
	 * @param uuid the snippet entry's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching snippet entry, or <code>null</code> if a matching snippet entry could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SnippetEntry fetchSnippetEntryByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return snippetEntryPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the snippet entry matching the UUID and group.
	 *
	 * @param uuid the snippet entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching snippet entry, or <code>null</code> if a matching snippet entry could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SnippetEntry fetchSnippetEntryByUuidAndGroupId(String uuid,
		long groupId) throws SystemException {
		return snippetEntryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the snippet entry with the primary key.
	 *
	 * @param snippetId the primary key of the snippet entry
	 * @return the snippet entry
	 * @throws PortalException if a snippet entry with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SnippetEntry getSnippetEntry(long snippetId)
		throws PortalException, SystemException {
		return snippetEntryPersistence.findByPrimaryKey(snippetId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return snippetEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the snippet entry with the matching UUID and company.
	 *
	 * @param uuid the snippet entry's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching snippet entry
	 * @throws PortalException if a matching snippet entry could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SnippetEntry getSnippetEntryByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return snippetEntryPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the snippet entry matching the UUID and group.
	 *
	 * @param uuid the snippet entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching snippet entry
	 * @throws PortalException if a matching snippet entry could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SnippetEntry getSnippetEntryByUuidAndGroupId(String uuid,
		long groupId) throws PortalException, SystemException {
		return snippetEntryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the snippet entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.victormiranda.liferay.sqleditor.model.impl.SnippetEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of snippet entries
	 * @param end the upper bound of the range of snippet entries (not inclusive)
	 * @return the range of snippet entries
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SnippetEntry> getSnippetEntries(int start, int end)
		throws SystemException {
		return snippetEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of snippet entries.
	 *
	 * @return the number of snippet entries
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSnippetEntriesCount() throws SystemException {
		return snippetEntryPersistence.countAll();
	}

	/**
	 * Updates the snippet entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param snippetEntry the snippet entry
	 * @return the snippet entry that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SnippetEntry updateSnippetEntry(SnippetEntry snippetEntry)
		throws SystemException {
		return snippetEntryPersistence.update(snippetEntry);
	}

	/**
	 * Returns the snippet entry local service.
	 *
	 * @return the snippet entry local service
	 */
	public com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalService getSnippetEntryLocalService() {
		return snippetEntryLocalService;
	}

	/**
	 * Sets the snippet entry local service.
	 *
	 * @param snippetEntryLocalService the snippet entry local service
	 */
	public void setSnippetEntryLocalService(
		com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalService snippetEntryLocalService) {
		this.snippetEntryLocalService = snippetEntryLocalService;
	}

	/**
	 * Returns the snippet entry remote service.
	 *
	 * @return the snippet entry remote service
	 */
	public com.victormiranda.liferay.sqleditor.service.SnippetEntryService getSnippetEntryService() {
		return snippetEntryService;
	}

	/**
	 * Sets the snippet entry remote service.
	 *
	 * @param snippetEntryService the snippet entry remote service
	 */
	public void setSnippetEntryService(
		com.victormiranda.liferay.sqleditor.service.SnippetEntryService snippetEntryService) {
		this.snippetEntryService = snippetEntryService;
	}

	/**
	 * Returns the snippet entry persistence.
	 *
	 * @return the snippet entry persistence
	 */
	public SnippetEntryPersistence getSnippetEntryPersistence() {
		return snippetEntryPersistence;
	}

	/**
	 * Sets the snippet entry persistence.
	 *
	 * @param snippetEntryPersistence the snippet entry persistence
	 */
	public void setSnippetEntryPersistence(
		SnippetEntryPersistence snippetEntryPersistence) {
		this.snippetEntryPersistence = snippetEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name remote service.
	 *
	 * @return the class name remote service
	 */
	public com.liferay.portal.service.ClassNameService getClassNameService() {
		return classNameService;
	}

	/**
	 * Sets the class name remote service.
	 *
	 * @param classNameService the class name remote service
	 */
	public void setClassNameService(
		com.liferay.portal.service.ClassNameService classNameService) {
		this.classNameService = classNameService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.victormiranda.liferay.sqleditor.model.SnippetEntry",
			snippetEntryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.victormiranda.liferay.sqleditor.model.SnippetEntry");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SnippetEntry.class;
	}

	protected String getModelClassName() {
		return SnippetEntry.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = snippetEntryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalService.class)
	protected com.victormiranda.liferay.sqleditor.service.SnippetEntryLocalService snippetEntryLocalService;
	@BeanReference(type = com.victormiranda.liferay.sqleditor.service.SnippetEntryService.class)
	protected com.victormiranda.liferay.sqleditor.service.SnippetEntryService snippetEntryService;
	@BeanReference(type = SnippetEntryPersistence.class)
	protected SnippetEntryPersistence snippetEntryPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
	protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = com.liferay.portal.service.ClassNameService.class)
	protected com.liferay.portal.service.ClassNameService classNameService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SnippetEntryLocalServiceClpInvoker _clpInvoker = new SnippetEntryLocalServiceClpInvoker();
}